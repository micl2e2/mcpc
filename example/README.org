#+OPTIONS: toc:2 num:nil

* MCP server: code-to-tree

The =code-to-tree= server's goals are:
1. Give LLMs the capability of *accurately* converting source code into
   AST(Abstract Syntax Tree), regardless of language.
2. One *standalone* binary should be everything the MCP client needs.

These goals imply:

1. The underlying syntax parser should be versatile enough to perform
   requested tasks. Here we choose *tree-sitter*, and languages are:
   C, C++, Rust, Ruby, Go, Java, Python.
2. The MCP server should be able to carry every capability within
   itself, meaning minimum extra software dependencies on the end
   user's machine. Here we choose *mcpc*.

   
** Using code-to-tree

Before everthing, you need to have the code-to-tree executable on your
machine (=code-to-tree.exe= for Windows, =code-to-tree= for macOS),
you can download from Github release page or build yourself. Once
downloaded, you configure your MCP clients to install it, check the section
/"Configure MCP Clients"/ for more details.

*Screenshots:*

<img src="./code-to-tree/chathistory.png" width="450px" /><img src="./code-to-tree/wholeast.png" width="200px" />


The above screenshots are obtained by asking the question specified
in =q.md=. 

(*IMPORTANT NOTE*: LLMs have no responsibility of generating the identical
result for the same question,  you will likely get a completely different
style or content. The screenshots or questions provided here are just for the reference)


** Configure MCP Clients

Here we use Claude as the example.

*** Windows
In your Claude configuration
(=C:\Users\YOUR_NAME\AppData\Roaming\Claude\claude_desktop_config.json=),
specify the location of =code-to-tree.exe=:

#+begin_src js
{
    "mcpServers": {
            "code-to-tree": { "command": "C:\\path\\to\\code-to-tree.exe" }
    }
}
#+end_src

*** macOS

In your Claude configuration,
(=~/Library/Application Support/Claude/claude_desktop_config.json=)
specify the location of =code-to-tree=

#+begin_src js
{
    "mcpServers": {
            "code-to-tree": { "command": "/path/to/code-to-tree" }
    }
}
#+end_src



** Building (Windows)
  
*** 1. Prepare environment

1. download & install MSYS2.
2. open application "MSYS2 MINGW64"
3. run =pacman -S make gcc git=

*** 2. Prepare tree-sitter libraries

Here we need to compile and install tree-sitter and all related grammars.

Clone them:

#+begin_src bash
git clone https://github.com/tree-sitter/tree-sitter

git clone https://github.com/tree-sitter/tree-sitter-c

git clone https://github.com/tree-sitter/tree-sitter-cpp

git clone https://github.com/tree-sitter/tree-sitter-rust

git clone https://github.com/tree-sitter/tree-sitter-ruby

git clone https://github.com/tree-sitter/tree-sitter-go

git clone https://github.com/tree-sitter/tree-sitter-java
#+end_src

Compile and install them:

#+begin_src bash
cd tree-sitter && OS=1 make install

cd tree-sitter-c && OS=1 make install

cd tree-sitter-cpp && OS=1 make install

cd tree-sitter-rust && OS=1 make install

cd tree-sitter-ruby && OS=1 make install

cd tree-sitter-go && OS=1 make install

cd tree-sitter-java && OS=1 make install
#+end_src

*** 3. Build code-to-tree

Install mcpc:

#+begin_src bash
  git clone https://github.com/micl2e2/mcpc
  cd mcpc && make install
#+end_src

Compile code-to-tree:

#+begin_src bash
  cd mcpc/example/code-to-tree

  CFLAGS="-I/usr/local/include -L/usr/local/lib" make

  # Check the binary
  file code-to-tree.exe

  # Remember the binary's location
  pwd
  # Assume the output is: /c/path/to/code-to-tree.exe
#+end_src


** Building (macOS)
  
*** 1. Prepare environment

1. Xcode Command Line Tools

*** 2. Prepare tree-sitter libraries

Here we need to compile and install tree-sitter and all related grammars.

Clone them:

#+begin_src bash
git clone https://github.com/tree-sitter/tree-sitter

git clone https://github.com/tree-sitter/tree-sitter-c

git clone https://github.com/tree-sitter/tree-sitter-cpp

git clone https://github.com/tree-sitter/tree-sitter-rust

git clone https://github.com/tree-sitter/tree-sitter-ruby

git clone https://github.com/tree-sitter/tree-sitter-go

git clone https://github.com/tree-sitter/tree-sitter-java
#+end_src

Compile and install them:

#+begin_src bash
cd tree-sitter && make install

cd tree-sitter-c && make install

cd tree-sitter-cpp && make install

cd tree-sitter-rust && make install

cd tree-sitter-ruby && make install

cd tree-sitter-go && make install

cd tree-sitter-java && make install
#+end_src

*** 3. Build code-to-tree

Install mcpc:

#+begin_src bash
  git clone https://github.com/micl2e2/mcpc
  cd mcpc && make install
#+end_src

Compile code-to-tree:

#+begin_src bash
  cd mcpc/example/code-to-tree

  make

  # Check the binary
  file ./code-to-tree

  # Remember the binary's location
  pwd
  # Assume the output is: /path/to/code-to-tree
#+end_src


* More yet to come...
